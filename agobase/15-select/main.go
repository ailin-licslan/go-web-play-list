package main

import (
	"fmt"
)

func main() {

	//创建3个有缓冲的整数通道
	ch1 := make(chan int, 10)
	ch2 := make(chan int, 10)
	ch3 := make(chan int, 10)

	//通过一个goroutine向这3个通道发送0-9的整数
	go func() {
		for i := 0; i < 10; i++ {
			ch1 <- i
			ch2 <- i
			ch3 <- i
		}
	}()

	//最后主协程中的select从3个通道中随机接收并处理打印数据  select 多路复用
	for i := 0; i < 10; i++ {
		select {
		case x := <-ch1:
			fmt.Printf("receive %d from channel 1\n", x)
		case y := <-ch2:
			fmt.Printf("receive %d from channel 2\n", y)
		case z := <-ch3:
			fmt.Printf("receive %d from channel 3\n", z)
		}
	}
}

/**
Go语言中通道（channel）和并发编程（通过goroutine）以及 select 语句的使用 ，在实际业务场景中有以下多种应用：

网络服务器与微服务

- 请求处理：在高并发的Web服务器或微服务架构中，不同的请求可能需要不同的处理逻辑。可以创建多个通道，每个通道对应一类请求的处理协程。例如，
一个电商网站，订单处理、商品查询、用户登录等不同类型的请求可以分别发送到不同的通道，由对应的goroutine进行处理。 select 语句可以
用来监听这些通道，当有请求到达时，快速分配到相应的处理逻辑中，提高系统的并发处理能力和响应速度。
- 服务间通信：在微服务架构中，各个微服务之间需要进行通信。通道可以作为一种高效的通信方式，传递数据和消息。比如，一个用户管理微服务和订单
管理微服务之间，当用户下单时，订单管理微服务可以通过通道向用户管理微服务发送请求，获取用户信息，而 select 语句可以用于处理多个微服务之间不同类型的通信请求。

分布式系统

- 任务分发与结果收集：在分布式计算任务中，例如大规模的数据处理任务（如数据分析、机器学习中的数据预处理等），可以将任务分发到多个工作节点
（通过通道发送任务到不同的goroutine）。每个工作节点处理完任务后，将结果通过通道返回。主程序使用 select 语句来接收各个工作节点返回的结果，实现任务的高效管理和结果的收集。
- 分布式锁：在分布式系统中，为了保证数据的一致性，需要使用分布式锁。Go语言的通道机制可以用于实现分布式锁的逻辑。例如，多个进程或节点竞争获取锁时，可以通过通道来协调，
select 语句可以用来判断锁的获取和释放情况。

消息队列与异步处理

- 消息消费：在消息队列系统中，生产者将消息发送到队列中，消费者从队列中获取消息进行处理。可以创建多个通道来模拟不同的消息队列，不同类型的消息（如普通消息、紧急消息等）
可以发送到不同的通道。消费者使用 select 语句监听这些通道，根据消息的类型进行相应的处理。例如，在一个日志处理系统中，不同级别的日志（如错误日志、警告日志、普通日志）可以通过不同的通道进行传输和处理。
- 异步任务处理：对于一些耗时较长的任务，如文件上传后的处理、数据的批量计算等，可以将这些任务放入goroutine中异步执行，并通过通道来传递任务的状态和结果。 select
语句可以用于监听任务的完成情况，及时进行后续处理。

实时数据分析与监控系统

- 数据采集与处理：在实时数据分析系统中，可能需要从多个数据源（如传感器、日志文件、数据库等）采集数据。可以为每个数据源创建一个通道，采集到的数据通过对应的通道发送到处理模块。
 select 语句可以监听这些通道，当有数据到达时，进行实时的分析和处理。例如，在一个物联网环境中，多个传感器实时采集温度、湿度、压力等数据，通过通道将数据发送到数据分析模块进行实时监测和预警。
- 系统监控：在监控系统中，需要实时监测系统的各种指标（如CPU使用率、内存占用、网络流量等）。可以为每个指标的监测创建一个通道，监测数据通过通道发送到监控中心。
select 语句可以用于监听这些通道，当某个指标出现异常时，及时进行报警和处理。

自动化脚本与工具

- 任务调度：在自动化脚本中，可能需要同时执行多个任务，如备份数据库、清理日志文件、更新系统配置等。可以为每个任务创建一个goroutine，并通过通道来传递任务的执行状态和结果。
 select 语句可以用于监听这些通道，实现任务的调度和管理，确保各个任务按照预定的顺序和条件执行。
- 多任务并发执行：在一些系统工具中，例如批量文件处理工具，可以同时处理多个文件。通过创建多个通道，每个通道对应一个文件的处理任务，使用 select 语句来协调各个任务的执行，提高文件处理的效率。
*/
